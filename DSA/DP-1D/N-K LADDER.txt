
	//N-K ladder compelete code


/*
Given a Ladder of size N, and in integer K, write a function to compute number of ways to climb the ladder if you can take a jump of almost k at every step.
*/

//<----------BRUTE FORCE APPROACH----------->
#include <bits/stdc++.h>
using namespace std;

int countWays(int n,int k){
    if(n==0){
        return 1;
    }
    if(n<0){
        return 0;
    }
    int ans=0;
    for(int jump=1;jump<=k;jump++){
        ans+=countWays(n-jump,k);
    }
    return ans;
}

//<----------TOP-DOWN APPROACH----------->
int countWaysTD(int n,int k,int *dp){
    if(n==0){
        return 1;
    }
    if(n<0){
        return 0;
    }
    if(dp[n]!=0){
        return dp[n];
    }
    int ans=0;
    for(int jump=1;jump<=k;jump++){
        ans+=countWaysTD(n-jump,k,dp);
    }
    return dp[n]=ans;
}

//<----------BOTTOM-UP APPROACH----------->
int countWaysBU(int n,int k){
    vector<int> dp(n+1,0);
    dp[0]=1;
    for(int i=0;i<=n;i++){
        for(int jump=1;jump<=k;jump++){
            if(i-jump>=0){
                dp[i]+=dp[i-jump];
            }
        }
    }
    return dp[n];
}

//<----------OPTIMISED APPROACH----------->
int countWaysOpt(int n,int k){
    vector<int> dp(n+1,0);
    dp[0]=1;
    dp[1]=1;
    for(int i=2;i<=k;i++){
        dp[i]=2*dp[i-1];
    }
    for(int i=k+1;i<=n;i++){
        dp[i]=2*dp[i-1]-dp[i-k-1];
    }
    return dp[n];
}

int main() {
    int n=4,k=3;
    int *dp=new int[n+1]();
    cout<<countWays(n,k)<<endl;
    cout<<countWaysTD(n,k,dp)<<endl;
    return 0;
}
