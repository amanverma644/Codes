
	//Count BST or Catalan Number Compelete code

/*
Count the number of Binary Search Trees that can be formed using N nodes, numbered from 1 to N.
*/


//<------BRUTE FORCE APPROACH------->
#include <bits/stdc++.h>
using namespace std;

int countBST(int n){
    //Base Case
    if(n==0 or n==1){
        return 1;
    }

    int ans=0;
    for(int i=1;i<=n;i++){
        int x=countBST(i-1);
        int y=countBST(n-i);
        ans+=x*y;
    }
    return ans;
}

//<------TOP DOWN APPROACH------->
int countBSTTopDown(int n,vector<int> dp){
    //Base Case
    if(n==0 or n==1){
        return 1;
    }
    if(dp[n]!=0){
        return dp[n];
    }
    int ans=0;
    for(int i=1;i<=n;i++){
        int x=countBSTTopDown(i-1,dp);
        int y=countBSTTopDown(n-i,dp);
        ans+=x*y;
    }
    return dp[n]=ans;
}


//<------BOTTOM-UP APPROACH------->
int countBSTBottomUp(int n){
    vector<int> dp(n+1,0);
    dp[0]=dp[1]=1;
    for(int i=2;i<=n;i++){
        for(int j=1;j<=i;j++){
            dp[i]+=(dp[j-1]*dp[i-j]);
        }
    }
    return dp[n];
}

int main() {
    int n=5;
    vector<int> dp(n+1,0);
    cout<<countBST(n)<<endl;
    cout<<countBSTTopDown(n,dp)<<endl;
    return 0;
}
