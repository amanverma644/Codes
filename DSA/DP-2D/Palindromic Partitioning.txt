
	//Palindromic Partitioning

/*
Given a string s, your task is to partition s such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of s.

Example:
Input:	 str = "geek"
Output:	 2
We need to make minimum 2 cuts, i.e., “g | ee | k”

*/

//Ref:	https://www.youtube.com/watch?v=qmTtAbOTqcg

//Approach -1 {Time Complexity - O(N^3) }
int partitioning(string str){
    //gap method
    vector<vector<bool>> dp(str.length(),vector<bool>(str.length()));
    for(int gap = 0;gap<str.length();gap++){
        for(int i = 0,j = gap;j<str.length();i++,j++){
            if(gap == 0){
                dp[i][j] = true;
            }else if(gap == 1){
                dp[i][j] = str[i] == str[j];
            }else{
                if(str[i] == str[j] and dp[i+1][j-1] == true){
                    dp[i][j] = true;
                }else{
                    dp[i][j] = false;
                }   
            }
        }
    }

    //create a 2-d storage vector
    vector<vector<int>> strg(str.length(),vector<int>(str.length()));
    for(int gap = 0;gap<str.length();gap++){
        for(int i = 0,j = gap;j<str.length();i++,j++){
            if(gap == 0){
                strg[i][j] = 0;
            }else if(gap == 1){
                if(str[i] == str[j]){
                    strg[i][j] = 0;
                }else{
                    strg[i][j] = 1;
                }
            }else{
                if(dp[i][j]){
                    strg[i][j] = 0;
                }else{
                    int min = INT_MAX;
                    for(int k = i;k<j;k++){
                        int left = strg[i][k];
                        int right = strg[k+1][j];

                        if(left + right + 1 < min){
                            min = left + right + 1;
                        }
                    }
                    strg[i][j] = min;
                }
            }
        }
    }
    return strg[0][str.length()-1];
}


//Approach -2 {Time Complexity - O(N^2) }

int partitioning(string str){
    //gap method
    vector<vector<bool>> dp(str.length(),vector<bool>(str.length()));
    for(int gap = 0;gap<str.length();gap++){
        for(int i = 0,j = gap;j<str.length();i++,j++){
            if(gap == 0){
                dp[i][j] = true;
            }else if(gap == 1){
                dp[i][j] = str[i] == str[j];
            }else{
                if(str[i] == str[j] and dp[i+1][j-1] == true){
                    dp[i][j] = true;
                }else{
                    dp[i][j] = false;
                }   
            }
        }
    }

    vector<int> strg(str.length());
    strg[0] = 0;
    for(int j = 1;j<str.length();j++){
        if(dp[0][j]){
            strg[j] = 0;
        }else{
            int min = INT_MAX;
            for(int i = j;i>=1;i--){
                if(dp[i][j]){
                    if(strg[i-1] < min){
                        min = strg[i-1];
                    }
                }
            }
            strg[j] = min + 1;
        }
    }
    return strg[str.length()-1];
}