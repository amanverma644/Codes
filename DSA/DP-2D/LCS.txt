
	//LCS (longest common subsequence)

#include <bits/stdc++.h>
using namespace std;

int lcs(string s1,string s2,int i,int j,vector<vector<int>> &dp){
    //Base Case
    if(i==s1.length() or j==s2.length()){
        return 0;
    }
    //Check state if already computed
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    //Rec case
    if(s1[i]==s2[j]){
        return dp[i][j]=1+lcs(s1,s2,i+1,j+1,dp);
    }
    int op1=lcs(s1,s2,i+1,j,dp);
    int op2=lcs(s1,s2,i,j+1,dp);
    return dp[i][j]=max(op1,op2);
}

//Bottom up Code

int lcsBU(string s1,string s2){
    int n1=s1.length();
    int n2=s2.length();
    vector<vector<int>> dp(n1+1,vector<int>(n2+1,0));
    for(int i=1;i<=n1;i++){
        for(int j=1;j<=n2;j++){
            if(s1[i-1]==s2[j-1]){
                dp[i][j]=1+dp[i-1][j-1];
            }else{
                int op1=dp[i-1][j];
                int op2=dp[i][j-1];
                dp[i][j]=max(op1,op2);
            }
        }
    }
    vector<char> result;
    int i=n1,j=n2;
    while(i!=0 and j!=0){
        if(dp[i][j]==dp[i][j-1]){
            j--;
        }else if(dp[i][j]==dp[i-1][j]){
            i--;
        }else{
            result.push_back(s1[i-1]);
            i--;
            j--;
        }
    }
    reverse(result.begin(),result.end());
    for(auto x:result){
        cout<<x<<" ";
    }
    cout<<endl;
    return dp[n1][n2];
}

int main() {
    string s1="ABCD";
    string s2="ABEDG";
    int n1=s1.length();
    int n2=s2.length();
    vector<vector<int>> dp(n1,vector<int>(n2,-1));
    cout<<lcs(s1,s2,0,0,dp)<<endl;
    return 0;
}
