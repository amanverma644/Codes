
	//Lecture Code Recursive Approach

#include <bits/stdc++.h>
using namespace std;

int countSub(string a,string b,int m,int n){
    //Base Case
    if((m==-1 and n==-1) or n==-1){
        return 1;
    }
    if(m==-1){
        return 0;
    }

    //Rec Case
    int ans=0;
    if(a[m]==b[n]){
        return countSub(a,b,m-1,n-1)+countSub(a,b,m-1,n);
    }
    return countSub(a,b,m-1,n);
}

int main() {
    string a="ABCDECCC";
    string b="ABC";
    cout<<countSub(a,b,a.length()-1,b.length()-1)<<endl;
    return 0;
}

	
	//CountSub Bottom Up approach

#include <bits/stdc++.h>
using namespace std;

int countSub(string a,string b){
    int m=a.length();
    int n=b.length();
    vector<vector<int>> dp(m+1,vector<int>(n+1,0));
    //Fill the First Col
    for(int i=0;i<=m;i++){
        dp[i][0]=1;
    }
    for(int i=1;i<=m;i++){
        for(int j=1;j<=n;j++){
            if(a[i-1]==b[j-1]){
                dp[i][j]=dp[i-1][j-1]+dp[i-1][j];
            }else{
                dp[i][j]=dp[i-1][j];
            }
        }
    }
    return dp[m][n];
}

int main() {
    string a="ABCDEC";
    string b="ABC";
    cout<<countSub(a,b)<<endl;
    return 0;
}

