
	//Wines Selling Problem Top Down Code

#include <bits/stdc++.h>
using namespace std;

int wines(vector<vector<int>> dp,int prices[],int L,int R,int y){
    //Base case
    if(L>R){
        return 0;
    }
    //Check is state is already calculated
    if(dp[L][R]!=0){
        return dp[L][R];
    }
    int pick_left=y*prices[L]+wines(dp,prices,L+1,R,y+1);
    int pick_right=y*prices[R]+wines(dp,prices,L,R-1,y+1);
    return dp[L][R]=max(pick_left,pick_right);
}

int main() {
    int prices[]={2,3,5,1,4};
    int n=5;
    vector<vector<int>> dp(n,vector<int>(n,0));
    cout<<wines(dp,prices,0,n-1,1)<<endl;
    return 0;
}


<-------------------------------------------------------->


	//Wines Selling problem Bottom-Up approach

#include <bits/stdc++.h>
using namespace std;

int wines(int *prices,int n){
    vector<vector<int>> dp(n+1,vector<int>(n+1,0));
    for(int i=n-1;i>=0;i--){
        for(int j=0;j<n;j++){
            if(i==j){
                dp[i][j]=n*prices[i];
            }else if(i<j){
                int y=n-(j-i);
                int pick_left=y*prices[i]+dp[i+1][j];
                int pick_right=y*prices[j]+dp[i][j-1];
                dp[i][j]=max(pick_left,pick_right);
            }
        }
    }
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cout<<dp[i][j]<<" ";
        }
        cout<<endl;
    }
    return dp[0][n-1];
}

int main() {
    int prices[]={2,3,5,1,4};
    int n=sizeof(prices)/sizeof(prices[0]);
    cout<<wines(prices,n)<<endl;
    return 0;
}



