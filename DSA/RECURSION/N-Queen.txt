
	//N-Queen code

#include <iostream>
using namespace std;

bool canPlace(int n,int board[][20],int x,int y){
    //column
    for(int k=0;k<n;k++){
        if(board[k][y]==1){
            return false;
        }
    }
    //left diag
    int i=x;
    int j=y;
    while(i>=0 and j>=0){
        if(board[i][j]==1){
            return false;
        }
        i--;
        j--;
    }
    i=x;
    j=y;
    while(i>=0 and j<n){
        if(board[i][j]==1){
            return false;
        }
        i--;
        j++;
    }

    return true;
}

void printBoard(int n,int board[][20]){
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            cout<<board[i][j]<<" ";
        }
        cout<<endl;
    }
    cout<<endl;
}

bool solveNQueen(int n,int board[][20],int i){
    //Base Case
    if(i==n){
        printBoard(n,board);
        return true;
    }
    
    //Rec Case
    //try to place a queen in every row
    for(int j=0;j<n;j++){
        //Whether the current i,j is safe or not
        if(canPlace(n,board,i,j)){
            board[i][j]=1;
            bool success=solveNQueen(n,board,i+1);
            if(success){
                return true;
            }
            //Backtrack
            board[i][j]=0;
        }
    }
    return false;
}

int main() {
    int board[20][20]={0};
    int n;
    cin>>n;
    solveNQueen(n,board,0);
	return 0;
}

