
	//Kruskals Algorithm

#include<bits/stdc++.h>
using namespace std;

class Edge{
    public:
    int source;
    int des;
    int weight;
};  

bool compare(Edge E1,Edge E2){
    return E1.weight<E2.weight;
}

int findParent(int v,int *parent){
    if(parent[v]==v){
        return v;
    }
    return findParent(parent[v],parent);
}

void kruskals(Edge *input,int n,int E){
    //Sort input array based on Weights
    sort(input,input+E,compare);
    Edge *output=new Edge[n-1];
    int *parent=new int[n];

    for(int i=0;i<n;i++){
        parent[i]=i;
    }
    int count=0;    //Currently how much edges are added in MST
    int i=0;    //Current Edge
    while(count!=n-1){
        Edge currentEdge=input[i];

        //Check Whether we can add current Edge in our MST
        int sourceParent=findParent(currentEdge.source,parent);
        int desParent=findParent(currentEdge.des,parent);
        if(sourceParent!=desParent){
            output[count]=currentEdge;
            count++;
            parent[sourceParent]=desParent;
        }
        i++;
    }  

    for(int i=0;i<n-1;i++){
        if(output[i].source<output[i].des){
            cout<<output[i].source<<" "<<output[i].des<<" "<<output[i].weight<<endl;
        }else{
            cout<<output[i].des<<" "<<output[i].source<<" "<<output[i].weight<<endl;
        }
    }
    delete output;
    delete parent;
}

int main(){
    int n,E;
    cin>>n>>E;
    Edge *input=new Edge[E];
    for(int i=0;i<E;i++){
        int s,d,w;
        cin>>s>>d>>w;
        input[i].source=s;
        input[i].des=d;
        input[i].weight=w;
    }

    kruskals(input,n,E);
    // delete [] input;
    return 0;
}