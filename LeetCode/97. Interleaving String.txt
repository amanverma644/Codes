
	//97. Interleaving String

//Problem Link:	https://leetcode.com/problems/interleaving-string

//Top-Down DP
bool helper(string s1,string s2,string s3,int i,int j,vector<vector<int>> &dp){
    if(i == s1.length() and j == s2.length()) return true;
    if(dp[i][j] != -1) return dp[i][j];
    if(i < s1.length() and s1[i] == s3[i+j]){
        bool ans = helper(s1,s2,s3,i+1,j,dp);
        dp[i][j] = ans;
        if(ans) return true;
    }
    if(j < s2.length() and s2[j] == s3[i+j]){
        bool ans = helper(s1,s2,s3,i,j+1,dp);
        dp[i][j] = ans;
        if(ans) return true;
    }
    return dp[i][j] = false;
}

bool isInterleave(string s1, string s2, string s3) {
    int n1 = s1.length();
    int n2 = s2.length();
    int n3 = s3.length();
    if(n1 + n2  != n3) return false;

    vector<vector<int>> dp(n1+1,vector<int>(n2+1,-1));
    return helper(s1,s2,s3,0,0,dp);
}

//Bottom Up Approach
bool isInterleave(string s1, string s2, string s3) {
    if(s1.length() + s2.length() != s3.length()) return false;
    vector<vector<bool>> dp(s1.length()+1,vector<bool>(s2.length()+1,false));

    for(int i = 0;i < dp.size();i++){
        for(int j = 0;j < dp[0].size();j++){
            if(i == 0 and j == 0) dp[i][j] = true;
            else if(i == 0) dp[i][j] = s2[j-1] == s3[i+j-1] ? dp[i][j-1] : false;
            else if(j == 0) dp[i][j] = s1[i-1] == s3[i+j-1] ? dp[i-1][j] : false;
            else{
                if(s1[i-1] == s3[i+j-1]){
                    dp[i][j] = dp[i-1][j];
                }
                if(!dp[i][j] and s2[j-1] == s3[i+j-1]){
                    dp[i][j] = dp[i][j-1];
                }
            }
        }
    }

    return dp[dp.size() - 1][dp[0].size() - 1];
}