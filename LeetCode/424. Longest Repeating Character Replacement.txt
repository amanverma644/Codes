
	//424. Longest Repeating Character Replacement

//Problem Link:	https://leetcode.com/problems/longest-repeating-character-replacement

int maxFreq(int *arr) {
	int maxF = 0;
	for (int i = 0; i < 26; i++) {
		maxF = max(maxF, arr[i]);
	}
	return maxF;
}

int characterReplacement(string s, int k) {
	//1) At every step add element to the hashmap/array(as an hashmap)
	//2) check window is valid or not by checking:
	//3) size of the window(length) - maximum frequency of element inside the hashmap(maxF)
	//4) if length - maxF <=k ->window is valid otherwise,
	//5) decrease the size of window from left and freq of that element
	int *arr = new int[26]();
	int res = 0;

	int l = 0;
	for (int r = 0; r < s.length(); r++) {
		int key = s[r] - 'A';
		arr[key]++;
		while ((r - l + 1) - maxFreq(arr) > k) {
			arr[s[l] - 'A']--;
			l++;
		}
		res = max(res, r - l + 1);
	}
	return res;
}
