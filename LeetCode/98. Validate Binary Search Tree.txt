
	//98. Validate Binary Search Tree

//Problem Link:	https://leetcode.com/problems/validate-binary-search-tree

//Inorder Traversal of BST gives sorted list
void dfs(TreeNode* root,vector<int> &v){
    if(!root) return;
    dfs(root->left,v);
    v.push_back(root->val);
    dfs(root->right,v);
}

bool isValidBST(TreeNode* root) {
  if(!root) return true;
  vector<int> v;
  dfs(root,v);
  for(int i = 0;i < v.size() - 1;i++) if(v[i] >= v[i+1]) return false;
  return true;
}

//OPTIMISED APPROACH
bool isBST(TreeNode* root,long lb,long ub){
    if(!root) return true;
    if(root->val <= lb or root->val >= ub) return false;
    return isBST(root->left,lb,root->val) and isBST(root->right,root->val,ub);
}
bool isValidBST(TreeNode* root) {
    return isBST(root,LONG_MIN,LONG_MAX);
}