
	//LeetCode 583. Delete Operation for Two Strings

//Problem Link:	https://leetcode.com/problems/delete-operation-for-two-strings

//Optimised Solution
int minDistance(string word1, string word2) {
    int m = size(word1), n = size(word2);
    vector<vector<int>> dp(m + 1,vector<int>(n + 1,0));
    for(int i = 1;i <= m;i++){
        for(int j = 1;j <= n;j++){
            if(i == 0 or j == 0) dp[i][j] = 0;
            else dp[i][j] = (word1[i-1] == word2[j-1] ? 1 + dp[i-1][j-1] : max(dp[i-1][j],dp[i][j-1]));
        }
    }
    return size(word1) - dp[m][n] + size(word2) - dp[m][n];
}

//Top-Down DP
int helper(string word1,string word2,int i,int j,vector<vector<int>> &dp){
    if(i == size(word1) and j == size(word2)) return 0;
    if(i == size(word1)) return size(word2) - j;
    if(j == size(word2)) return size(word1) - i;
    if(dp[i][j] != -1) return dp[i][j];
    if(word1[i] == word2[j]) return dp[i][j] = helper(word1,word2,i+1,j+1,dp);
    return dp[i][j] = 1 + min(helper(word1,word2,i+1,j,dp),helper(word1,word2,i,j+1,dp));
}

int minDistance(string word1, string word2) {
    vector<vector<int>> dp(size(word1),vector<int>(size(word2),-1));
    return helper(word1,word2,0,0,dp);
}