
	//63. Unique Paths II

//Problem Link: https://leetcode.com/problems/unique-paths-ii	


//Bottom Up DP
int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
    int n = obstacleGrid.size(),m = obstacleGrid[0].size();
    
    if(obstacleGrid[0][0] or obstacleGrid[n-1][m-1]) return 0;
    
    vector<vector<int>> dp(n,vector<int>(m,0));
    dp[0][0] = 1;
    for(int i = 0;i<n;i++){
        for(int j = 0;j<m;j++){
            if(i == 0 and j == 0) continue;
            else if(i == 0 and !obstacleGrid[i][j]) dp[i][j] = dp[i][j-1];
            else if(j == 0 and !obstacleGrid[i][j]) dp[i][j] = dp[i-1][j];
            else if(!obstacleGrid[i][j]) dp[i][j] = dp[i-1][j] + dp[i][j-1];
        }
    }
    return dp[n-1][m-1];
}

//OR

int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
    int n = obstacleGrid.size(),m = obstacleGrid[0].size();
    vector<vector<int>> dp(n+1,vector<int>(m+1,0));
    dp[0][1] = 1;
    for(int i = 1;i<=n;i++){
        for(int j = 1;j<=m;j++){
            if(!obstacleGrid[i-1][j-1]) dp[i][j] = dp[i-1][j] + dp[i][j-1];
        }
    }
    return dp[n][m];
}


//Top Down DP
vector<vector<int>> directions = {{1,0},{0,1}};
const int MOD = 2e9 + 1;

int dfs(vector<vector<int>>& obstacleGrid,int i,int j,vector<vector<int>> &dp){
    if(i == obstacleGrid.size() - 1 and j == obstacleGrid[0].size() - 1) return 1;
    if(dp[i][j] != -1) return dp[i][j];
    int ans = 0;
    for(auto dir:directions){
        int dx = i + dir[0];
        int dy = j + dir[1];

        if(dx < obstacleGrid.size() and dy < obstacleGrid[0].size() and !obstacleGrid[dx][dy]) {
            ans += dfs(obstacleGrid,dx,dy,dp);
            ans%=MOD;
        }
    }
    return dp[i][j] = ans;
}

int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
    int n = obstacleGrid.size(),m = obstacleGrid[0].size();
    if(obstacleGrid[0][0] or obstacleGrid[n-1][m-1]) return 0;
    vector<vector<int>> dp(n,vector<int>(m,-1));
    return dfs(obstacleGrid,0,0,dp);
}