
	//315. Count of Smaller Numbers After Self

//Problem Link:	https://leetcode.com/problems/count-of-smaller-numbers-after-self

void merge(vector<int> &nums,int l,int mid,int r,vector<pair<int,int>> &v,vector<int> &cnt){
    vector<pair<int,int>> temp(r-l+1);
    int i = l;
    int j = mid + 1;
    int k = 0;

    while(i <= mid and j <= r){
        if(v[i].first <= v[j].first){
            temp[k++] = v[j++];
        }else{
            cnt[v[i].second] += r - j + 1;
            temp[k++] = v[i++];
        }
    }

    while(i <= mid){
        temp[k++] = v[i++];
    }

    while(j <= r){
        temp[k++] = v[j++];
    }

    for(i = l;i <= r;i++){
        v[i] = temp[i-l];
    }
}

void mergeSort(vector<int> &nums,int l,int r,vector<pair<int,int>> &v,vector<int> &cnt){
    if(l >= r) return;
    int mid = (l + r)/2;
    mergeSort(nums,l,mid,v,cnt);
    mergeSort(nums,mid + 1,r,v,cnt);
    merge(nums,l,mid,r,v,cnt);
}

vector<int> countSmaller(vector<int>& nums) {
    vector<pair<int,int>> v;
    for(int i = 0;i < nums.size();i++){
        v.push_back({nums[i],i});
    }
    vector<int> cnt(nums.size(),0);
    mergeSort(nums,0,nums.size()-1,v,cnt);
    return cnt;
}