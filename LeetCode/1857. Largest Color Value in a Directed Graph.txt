
	//1857. Largest Color Value in a Directed Graph

//Problem Link:	https://leetcode.com/problems/largest-color-value-in-a-directed-graph

int getMax(vector<int> &nums) {
	int ans = nums[0];
	for (auto num : nums) ans = max(ans, num);
	return ans;
}

int largestPathValue(string colors, vector<vector<int>>& edges) {
	int n = colors.length();
	vector<int> g[n];
	for (auto edge : edges) {
		g[edge[0]].push_back(edge[1]);
	}

	vector<vector<int>> mp(n, vector<int>(26, 0));
	queue<int> q;
	vector<int> indegree(n, 0);

	for (int i = 0; i < n; i++) {
		for (auto nbr : g[i]) {
			indegree[nbr]++;
		}
	}

	for (int i = 0; i < n; i++) {
		if (!indegree[i]) {
			q.push(i);
			mp[i][colors[i] - 'a'] = 1;
		}
	}

	int res = 0;
	int seen = 0;

	while (!q.empty()) {
		int node = q.front();
		q.pop();
		seen++;
		res = max(res, getMax(mp[node]));

		for (auto nbr : g[node]) {
			for (int i = 0; i < 26; i++) {
				mp[nbr][i] = max(mp[nbr][i], mp[node][i] + (colors[nbr] - 'a' == i ? 1 : 0));
			}
			if (--indegree[nbr] == 0) q.push(nbr);
		}
	}
    
	return seen == n ? res : -1;
}