
	//131. Palindrome Partitioning

//Problem Link:	https://leetcode.com/problems/palindrome-partitioning

bool isPalindrome(string s) {
	int li = 0;
	int ri = s.length() - 1;

	while (li < ri) {
		if (s[li] != s[ri]) {
			return false;
		}
		li++;
		ri--;
	}
	return true;
}

void helper(string s, vector<vector<string>> &res, vector<string> &afs) {
	if (s.length() == 0) {
		res.push_back(afs);
		return;
	}

	for (int i = 0 ; i < s.length(); i++) {
		string prefix = s.substr(0, i + 1);
		string ros = s.substr(i + 1);

		if (isPalindrome(prefix)) {
			afs.push_back(prefix);
			helper(ros, res, afs);
			afs.pop_back();
		}
	}
}

vector<vector<string>> partition(string s) {
	vector<vector<string>> res;
	vector<string> afs;
	helper(s, res, afs);
	return res;
}

//afs: answer so far
//ros: rest of the string