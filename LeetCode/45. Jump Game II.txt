
	//45. Jump Game II

//Problem Link: https://leetcode.com/problems/jump-game-ii

//Top-Down Approach
int helper(vector<int> &nums, int n, int i,vector<int> &dp) {
	if (i == n - 1) {
		return 0;
	}
	if (i >= n) {
		return INT_MAX;
	}

    if(dp[i] != -1){
        return dp[i];
    }

	int minSteps = INT_MAX;
	int max_steps = nums[i];

	for (int step = 1; step <= max_steps; step++) {
		int next_step = i + step;
		int subProb = helper(nums, n, next_step,dp);

		if (subProb < minSteps) {
			minSteps = 1 + subProb;
		}
	}
	return dp[i]=minSteps;
}

int jump(vector<int>& nums) {
	int n = nums.size();
    vector<int> dp(n,-1);
	return helper(nums, n, 0,dp);
}