
	//310. Minimum Height Trees

//Problem Link:	https://leetcode.com/problems/minimum-height-trees

vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
    if(n <= 0) return {};
    if(n <= 1) return {0};
    vector<int> l[n];
    vector<int> inDegree(n,0);

    for(auto edge:edges){
        int u = edge[0];
        int v = edge[1];
        l[u].push_back(v);
        l[v].push_back(u);
        inDegree[u]++;
        inDegree[v]++;
    }

    queue<int> q;
    for(int i = 0;i < n;i++){
        if(inDegree[i] == 1) q.push(i);
    }

    while(n > 2){
        int sze = q.size();
        n -= sze;
        while(sze--){
            int node = q.front();
            q.pop();

            for(auto nbr:l[node]){
                if(--inDegree[nbr] == 1) q.push(nbr);
            }
        }
    }
    vector<int> res;
    while(!q.empty()){
        res.push_back(q.front());
        q.pop();
    }
    return res;
}