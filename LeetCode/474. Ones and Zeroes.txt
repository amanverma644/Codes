	
	//474. Ones and Zeroes

//Problem Link:	https://leetcode.com/problems/ones-and-zeroes


//Top Down DP

int dp[601][101][101];

int helper(vector<pair<int,int>>& a,int i,int m,int n){
    if(i == a.size() or (m == 0 and n == 0)) return 0;

    if(dp[i][m][n] != -1) return dp[i][m][n];

    int one = a[i].second;
    int zero = a[i].first;

    int inc = 0,exc = 0;
    if(zero <= m and one <= n){
        inc = 1 + helper(a,i+1,m-zero,n-one);
    }
    exc = helper(a,i+1,m,n);
    return dp[i][m][n] = max(inc,exc);
}

int findMaxForm(vector<string>& strs, int m, int n) {
    memset(dp,-1,sizeof(dp));
    vector<pair<int,int>> a;
    
    for(auto str:strs){
        int one = 0,zero = 0;
        for(auto ch:str){
            if(ch == '1') one++;
            else zero++;
        }
        a.push_back({zero,one});
    }
    return helper(a,0,m,n);
}

//***OR***
int countOne(string s) { return count(begin(s),end(s),'1'); }
int countZero(string s) { return count(begin(s),end(s),'0'); }

int dp[601][101][101];

int helper(vector<string>& strs,int i,int m,int n){
    if(i == strs.size() or (m == 0 and n == 0)) return 0;

    if(dp[i][m][n] != -1) return dp[i][m][n];

    int one = countOne(strs[i]);
    int zero = countZero(strs[i]);


    int inc = 0,exc = 0;
    if(zero <= m and one <= n){
        inc = 1 + helper(strs,i+1,m-zero,n-one);
    }
    exc = helper(strs,i+1,m,n);
    return dp[i][m][n] = max(inc,exc);
}

int findMaxForm(vector<string>& strs, int m, int n) {
    memset(dp,-1,sizeof(dp));
    return helper(strs,0,m,n);
}