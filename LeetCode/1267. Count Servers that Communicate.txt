
	//1267. Count Servers that Communicate

//Problem Link:	https://leetcode.com/problems/count-servers-that-communicate

//By doing some preprocessing
int countServers(vector<vector<int>>& grid) {
    int m = grid.size(),n = grid[0].size();
    vector<int> row(m,0),col(n,0);
    for(int i = 0;i < m;i++){
        for(int j = 0;j < n;j++){
            if(grid[i][j]){
                row[i]++;
                col[j]++;
            }
        }
    }

    int res = 0;
    for(int i = 0;i < m;i++){
        for(int j = 0;j < n;j++){
            if(grid[i][j] and (row[i] > 1 or col[j] > 1)) res++;
        }
    }
    return res;
}

//BFS
int countServers(vector<vector<int>>& grid) {
    int res = 0;
    int m = grid.size(),n = grid[0].size();
    vector<vector<int>> vis(m,vector<int>(n,0));

    for(int i = 0;i < m;i++){
        for(int j = 0;j < n;j++){
            if(grid[i][j] and !vis[i][j]){
                queue<pair<int,int>> q;
                q.push({i,j});
                vis[i][j] = 1;
                int cnt = 0;
                while(!q.empty()){
                    auto p = q.front();
                    q.pop();
                    cnt++;

                    int ii = p.first;
                    int jj = p.second;
                    //add servers that lie on the same row
                    for(int k = 0;k < n;k++){
                        if(!vis[ii][k] and grid[ii][k]){
                            vis[ii][k] = 1;
                            q.push({ii,k});
                        }
                    }
                    //add servers that lie on the same col
                    for(int k = 0;k < m;k++){
                        if(!vis[k][jj] and grid[k][jj]){
                            vis[k][jj] = 1;
                            q.push({k,jj});
                        }
                    }
                }
                if(cnt != 1) res+=cnt;
            }
        }
    }
    return res;
}