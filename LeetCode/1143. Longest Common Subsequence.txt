
	//1143. Longest Common Subsequence

#include <bits/stdc++.h>
using namespace std;

int longestCommonSubsequence(string text1, string text2) {
    int n1=text1.size();
    int n2=text2.size();
    vector<vector<int>> dp(n1+1,vector<int>(n2+1,0));

    for(int i=1;i<=n1;i++){
        for(int j=1;j<=n2;j++){
            if(text1[i-1]==text2[j-1]){
               dp[i][j]=1+dp[i-1][j-1];
            }else{
                dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
            }
        }
    }
    return dp[n1][n2];
}

int main() {
    string s1="abcd";
    string s2="acd";
    cout<<longestCommonSubsequence(s1,s2)<<endl;

    return 0;
}

<----TOP-DOWN APPROACH--->

#include <bits/stdc++.h>
using namespace std;

int helper(string s1,string s2,int i,int j,vector<vector<int>> &dp){
    //Base case
    if(i==s1.length() or j==s2.length()){
        return 0;
    }
    //check if the state is already calculated
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    if(s1[i]==s2[j]){
        return dp[i][j]=1+helper(s1,s2,i+1,j+1,dp);
    }else{
        return dp[i][j]=max(helper(s1,s2,i+1,j,dp),helper(s1,s2,i,j+1,dp));
    }
}

int longestCommonSubsequence(string text1, string text2) {
    vector<vector<int>> dp(text1.size(),vector<int>(text2.size(),-1));
    return helper(text1,text2,0,0,dp);
}

int main() {
    string s1="abcd";
    string s2="acd";
    cout<<longestCommonSubsequence(s1,s2)<<endl;

    return 0;
}

