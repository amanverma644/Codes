
	//924. Minimize Malware Spread

//Problem Link:	https://leetcode.com/problems/minimize-malware-spread

int find_set(int i, int parent[]) {
	if (parent[i] == -1) return i;
	return parent[i] = find_set(parent[i], parent);
}

void union_set(int x, int y, int parent[], int rank[]) {
	int s1 = find_set(x, parent);
	int s2 = find_set(y, parent);
	if (s1 != s2) {
		if (rank[s2] <= rank[s1]) {
			parent[s2] = s1;
			rank[s1] += rank[s2];
		} else {
			parent[s1] = s2;
			rank[s2] += rank[s1];
		}
	}
}

int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
	int n = graph.size();
	int *parent = new int[n];
	int *rank = new int[n];

	fill(parent, parent + n, -1);
	fill(rank, rank + n, 1);

	for (int i = 0; i < graph.size(); i++) {
		for (int j = 0; j < graph[0].size(); j++) {
			if (i != j and graph[i][j] == 1) {
				union_set(i, j,parent,rank);
			}
		}
	}

	sort(begin(initial), end(initial));
	//infected patient count
	int *ipc = new int[n]{};
	for (auto node : initial) {
		ipc[find_set(node, parent)]++;
	}

	int res = initial[0];
	int maximum = 0;

	for (auto patient : initial) {
		int s = find_set(patient, parent);
		if (ipc[s] == 1 and rank[s] > maximum) {
			res = patient;
            maximum = rank[s];
		}
	}
	return res;
}