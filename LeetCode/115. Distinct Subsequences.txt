
	//LeetCode 115. Distinct Subsequences

<-----TOP DOWN DP------>

#include <bits/stdc++.h>
using namespace std;

int helper(string s,string t,int i,int j,vector<vector<int>> &dp){
    if((i==-1 and j==-1) or j==-1){
        return 1;
    }
    if(i==-1){
        return 0;
    }
    if(dp[i][j]!=-1){
        return dp[i][j];
    }

    if(s[i]==t[j]){
        return dp[i][j]=helper(s,t,i-1,j-1,dp)+helper(s,t,i-1,j,dp);
    }
    return dp[i][j]=helper(s,t,i-1,j,dp);
}

int numDistinct(string s, string t) {
    int m=s.length();
    int n=t.length();
    vector<vector<int>> dp(m,vector<int>(n,-1));
    return helper(s,t,m-1,n-1,dp);
}

int main() {
    string s="rabbbit";
    string t="rabbit";
    cout<<numDistinct(s,t)<<endl;
    return 0;
}


<--------BOTTOM-UP APPROACH----->

#include <bits/stdc++.h>
using namespace std;

int numDistinct(string s, string t) {
    int m=s.length();
    int n=t.length();
    vector<vector<unsigned int>> dp(m+1,vector<unsigned int>(n+1,0));

    //filling first col with 1
    for(int i=0;i<=m;i++){
        dp[i][0]=1;
    }

    for(int i=1;i<=m;i++){
        for(int j=1;j<=n;j++){
            if(s[i-1]==t[j-1]){
                dp[i][j]=dp[i-1][j-1]+dp[i-1][j];
            }else{
                dp[i][j]=dp[i-1][j];
            }
        }
    }
    return dp[m][n];
}

int main() {
    string s="rabbbit";
    string t="rabbit";
    cout<<numDistinct(s,t)<<endl;
    return 0;
}
