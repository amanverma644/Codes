
	//120. Triangle

//Problem Link:	https://leetcode.com/problems/triangle

//S.C: O(N)
int minimumTotal(vector<vector<int>>& triangle) {
    vector<int> dp(triangle.size(),0);
    dp[0] = triangle[0][0];
    for(int i = 1;i < triangle.size();i++){
        vector<int> temp;
        for(int j = 0;j <= i;j++){
            if(j == 0) temp.push_back(triangle[i][j] + dp[0]);
            else if(j == i) temp.push_back(triangle[i][j] + dp[i-1]);
            else temp.push_back(triangle[i][j] + min(dp[j-1],dp[j]));
        }
        dp = temp;
    }
    return *min_element(begin(dp),end(dp));
}

//S.C: O(N^2)
int minimumTotal(vector<vector<int>>& triangle) {
    vector<vector<int>> dp;
    dp.push_back({triangle[0][0]});
    for(int i = 1;i < triangle.size();i++){
        vector<int> temp;
        for(int j = 0;j <= i;j++){
            if(j == 0) temp.push_back(triangle[i][j] + dp[i-1][j]);
            else if(j == i) temp.push_back(triangle[i][j] + dp[i-1][j-1]);
            else temp.push_back(triangle[i][j] + min(dp[i-1][j],dp[i-1][j-1]));
        }
        dp.push_back(temp);
    }
    return *min_element(begin(dp[dp.size()-1]),end(dp[dp.size()-1]));
}