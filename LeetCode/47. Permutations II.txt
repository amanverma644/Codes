
	//47. Permutations II

//Problem Link:	https://leetcode.com/problems/permutations-ii

void helper(vector<int> &nums,vector<vector<int>> &res,vector<int> comb,vector<bool> &vis){
    if(comb.size() == nums.size()){
        res.push_back(comb);
        return;
    }

    for(int i = 0;i<nums.size();i++){
        if(i > 0 and nums[i] == nums[i-1] and !vis[i-1]) continue;
        if(!vis[i]){
            vis[i] = true;
            comb.push_back(nums[i]);
            helper(nums,res,comb,vis);
            comb.pop_back();
            vis[i] = false;
        }
    }
}
    
vector<vector<int>> permuteUnique(vector<int>& nums) {
    vector<vector<int>> res;
    vector<int> comb;
    vector<bool> vis(nums.size(),false);
    sort(begin(nums),end(nums));
    helper(nums,res,comb,vis);
    return res;
}