
	//leetCode 62 UNIQUE PATHS SOL

#include <bits/stdc++.h>
using namespace std;

int helper(int m,int n,int i,int j,vector<vector<int>> &dp){
    //base case
    if(i==m-1 and j==n-1){
        return 1;
    }
    //edge case
    if(i>=m or j>=n){
        return 0;
    }

    if(dp[i][j]!=0){
        return dp[i][j];
    }
    return dp[i][j]=helper(m,n,i+1,j,dp)+helper(m,n,i,j+1,dp);
}

int uniquePathsTD(int m, int n) { 
    vector<vector<int>> dp(m,vector<int>(n,0));
    return helper(m,n,0,0,dp);
}

int uniquePaths(int m, int n) { 
    vector<vector<int>> dp(m,vector<int>(n,0));
    //fill the last row and col with 1
    for(int i=m-1;i>=0;i--){
        dp[i][n-1]=1;
    }
    for(int j=n-1;j>=0;j--){
        dp[m-1][j]=1;
    }

    //Main logic
    for(int i=m-2;i>=0;i--){
        for(int j=n-2;j>=0;j--){
            dp[i][j]=(dp[i+1][j]+dp[i][j+1]);
        }
    }
    return dp[0][0];
}

int main() {
    int m=3,n=7;
    cout<<uniquePathsTD(m,n)<<endl;
    cout<<uniquePaths(m,n)<<endl;
    return 0;
}
