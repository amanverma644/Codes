
	//695. Max Area of Island

//Problem Link:	https://leetcode.com/problems/max-area-of-island

//Brute Force Approach
vector<vector<int>> directions = {{1, 0}, {0, 1}, { -1, 0}, {0, -1}};

int dfs(vector<vector<int>>& grid, int i, int j) {

	int maxArea = 0;
	grid[i][j] = 0;

	for (auto dir : directions) {
		if ((dir[0] + i < 0) or (dir[0] + i >= grid.size()) or (dir[1] + j < 0) or (dir[1] + j >= grid[0].size())) continue;
		if (grid[dir[0] + i][dir[1] + j]) {
			int area = 1 + dfs(grid, dir[0] + i, dir[1] + j);
			maxArea += area;
		}
	}

	return maxArea;
}

int maxAreaOfIsland(vector<vector<int>>& grid) {
	int maxArea = 0;
	for (int i = 0; i < grid.size(); i++) {
		for (int j = 0; j < grid[0].size(); j++) {
			if (grid[i][j]) {
				maxArea = max(maxArea, 1 + dfs(grid, i, j));
			}
		}
	}
	return maxArea;
}

//Another way
int maxAreaOfIsland(vector<vector<int>>& grid) {
    int max_area = 0;
    for(int i = 0; i < grid.size(); i++)
        for(int j = 0; j < grid[0].size(); j++)
            if(grid[i][j] == 1)max_area = max(max_area, AreaOfIsland(grid, i, j));
    return max_area;
}

int AreaOfIsland(vector<vector<int>>& grid, int i, int j){
    if( i >= 0 && i < grid.size() && j >= 0 && j < grid[0].size() && grid[i][j] == 1){
        grid[i][j] = 0;
        return 1 + AreaOfIsland(grid, i+1, j) + AreaOfIsland(grid, i-1, j) + AreaOfIsland(grid, i, j-1) + AreaOfIsland(grid, i, j+1);
    }
    return 0;
}
