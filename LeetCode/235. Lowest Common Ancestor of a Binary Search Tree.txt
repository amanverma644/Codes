
	//235. Lowest Common Ancestor of a Binary Search Tree

//Problem Link:	https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree

//OPTIMISED APPROACH
TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    if(!root) return root;
    if((root->val > p->val) and (root->val > q->val)){
        return lowestCommonAncestor(root->left,p,q);
    }
    if((root->val < p->val) and (root->val < q->val)){
        return lowestCommonAncestor(root->right,p,q);
    }
    return root;
}

//BRUTE FORCE
TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
    if(!root) return root;
    if(root == p or root == q) return root;
    TreeNode* left = NULL;
    TreeNode* right = NULL;
    if((root->val > p->val) or (root->val > q->val)){
        left = lowestCommonAncestor(root->left,p,q);
    }
    if((root->val < p->val) or (root->val < q->val)){
        right = lowestCommonAncestor(root->right,p,q);
    }
    if(left and right) return root;
    return left ? left : right;
}