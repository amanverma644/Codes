
	//142. Linked List Cycle II

//Problem Link:	https://leetcode.com/problems/linked-list-cycle-ii

//Brute Force (space: O(N) time: O(N))
ListNode *detectCycle(ListNode *head) {
	if (!head or !head->next) return NULL;

    ListNode *temp = head;
    unordered_set<ListNode*> s;
    
    while(temp != NULL){
        if(s.count(temp)){
            return temp;
        }
        s.insert(temp);
        temp = temp->next;
    }
    return NULL;
}

//Optimised Approach (space: O(1) time: O(N))
ListNode *detectCycle(ListNode *head) {
	if (!head or !head->next) return NULL;

	ListNode *slow = head;
	ListNode *fast = head;

	while (fast->next != NULL and fast->next->next != NULL) {
		slow = slow->next;
		fast = fast->next->next;

		if (fast == slow) {
			slow = head;
			while (slow != fast) {
				slow = slow->next;
				fast = fast->next;
			}
            return slow;
		}
	}
	return NULL;
}