
	//142. Linked List Cycle II

//Problem Link:	https://leetcode.com/problems/linked-list-cycle-ii

//Brute Force (space: O(N) time: O(N))
ListNode *detectCycle(ListNode *head) {
	if (!head or !head->next) return NULL;

    ListNode *temp = head;
    unordered_set<ListNode*> s;
    
    while(temp != NULL){
        if(s.count(temp)){
            return temp;
        }
        s.insert(temp);
        temp = temp->next;
    }
    return NULL;
}

//Optimised Approach (space: O(1) time: O(N))

/*
Assume the distance from head to the start of the loop is x1
the distance from the start of the loop to the point fast and slow meet is x2
the distance from the point fast and slow meet to the start of the loop is x3

What is the distance fast moved? What is the distance slow moved? And their relationship?

x1 + x2 + x3 + x2
x1 + x2
x1 + x2 + x3 + x2 = 2 (x1 + x2)
Q: Why x1 + x2 + x3 + x2 = 2 (x1 + x2)?

Ans: Its just the relationship between the distance travelled by fast ptr and the distance travelled by the slow ptr.
As fast ptr, runs twice the speed of slow ptr. Therefore, when they meet, distance travelled by fast ptr will be 2*(distance travelled by slow ptr).

Therefore, x1 = x3.
*/

ListNode *detectCycle(ListNode *head) {
	if (!head or !head->next) return NULL;

	ListNode *slow = head;
	ListNode *fast = head;

	while (fast->next != NULL and fast->next->next != NULL) {
		slow = slow->next;
		fast = fast->next->next;

		if (fast == slow) {
			slow = head;
			while (slow != fast) {
				slow = slow->next;
				fast = fast->next;
			}
            return slow;
		}
	}
	return NULL;
}