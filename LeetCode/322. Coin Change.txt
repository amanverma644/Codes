
	//322. Coin Change

//Problem Link:	https://leetcode.com/problems/coin-change

//Bottom Up DP
int coinChange(vector<int>& coins, int amount) {
    vector<int> dp(amount+1,0);
    for(int i = 1;i <= amount;i++){
        dp[i] = INT_MAX;
        for(auto coin:coins){
            if(i-coin>=0 and dp[i-coin] != INT_MAX){
                dp[i] = min(dp[i],1 + dp[i-coin]);
            }
        }
    }
    return dp[amount] == INT_MAX ? -1 : dp[amount];
}

//Top down DP
int coinChange_helper(vector<int>& coins, int amount,vector<int> &dp){
    if(amount == 0) return 0;
    if(dp[amount] != -1) return dp[amount];
    int ans = INT_MAX;
    for(auto coin:coins){
        if(amount - coin >= 0){
            int minCoins = coinChange_helper(coins,amount-coin,dp);
            if(minCoins != INT_MAX and ans > 1 + minCoins){
                ans = 1 + minCoins;
            }
        }
    }
    return dp[amount] = ans;
}

int coinChange(vector<int>& coins, int amount) {
    vector<int> dp(amount+1,-1);
    int ans = coinChange_helper(coins,amount,dp);
    return ans == INT_MAX ? -1 : ans;
}