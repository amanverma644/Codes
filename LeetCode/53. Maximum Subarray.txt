
	//53. Maximum Subarray

//Problem Link:	https://leetcode.com/problems/maximum-subarray

//DP Approach
int maxSubArray(vector<int>& nums) {
    int n = nums.size();
    vector<int> dp(n,0);
    int ans = nums[0];
    dp[0] = nums[0];

    for(int i = 1;i<n;i++){
        dp[i] = nums[i] + (dp[i-1] > 0 ? dp[i-1] : 0);
        ans = max(ans,dp[i]);
    }

    return ans;
}

//using kadanes Algo
int maxSubArray(vector<int>& nums) {
    int cs = 0;
    int sum = nums[0];

    for(auto x:nums){
        cs+=x;
        sum = max(sum,cs);
        if(cs<0){
            cs = 0;
        }
    }
    return sum;
}