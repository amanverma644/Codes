	
		//61. Rotate List

//Problem Link:	https://leetcode.com/problems/rotate-list


//Brute Force Approach

ListNode* rotateRight(ListNode* head, int k) {
    if(head == NULL or head->next == NULL){
        return head;
    }

    while(k--){
        ListNode *prev = head;
        ListNode *curr = head->next;

        while(curr->next != NULL){
            prev = curr;
            curr = curr->next;
        }

        prev->next = NULL;
        curr->next = head;
        head = curr;
    }

    return head;
}

//Optimised Approach

ListNode* rotateRight(ListNode* head, int k) {
    if(head == NULL or head->next == NULL){
        return head;
    }
    
    //find the length of the linked list
    int len = 0;
    ListNode *temp = head;
    while(temp != NULL){
        temp = temp->next;
        len++;
    }
    k = k%len;
    
    while(k--){
        ListNode *prev = head;
        ListNode *curr = head->next;

        while(curr->next != NULL){
            prev = curr;
            curr = curr->next;
        }

        prev->next = NULL;
        curr->next = head;
        head = curr;
    }

    return head;
}