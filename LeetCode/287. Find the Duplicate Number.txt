
	//287. Find the Duplicate Number

//Problem Link:	https://leetcode.com/problems/find-the-duplicate-number

//Binary Search Approach
int findDuplicate(vector<int>& nums) {
    int low = 1;
    int high = nums.size() - 1;

    while(low < high){
        int mid = low + (high-low)/2;
        int count = 0;
        for(int num:nums){
            count+= (num<=mid);
        }

        count<=mid ? (low = mid + 1) : (high = mid);
    }
    return low;
}

//Negative Indexing Approach
int findDuplicate(vector<int>& nums) {
    int duplicate = -1;
    for(int i = 0;i<nums.size();i++){
        int cur = abs(nums[i]);
        if(nums[cur]<0){
            duplicate = cur;
            break;
        }
        nums[cur]*= -1;
    }

    for(auto num:nums){
        num = abs(num);
    }

    return duplicate;
}