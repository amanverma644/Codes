
	//980. Unique Paths III

//Problem Link:	https://leetcode.com/problems/unique-paths-iii

int empty = 1,res = 0;

void dfs(vector<vector<int>> &grid,int i,int j,int count){
    //base case
    if(i<0 || i>=grid.size() || j<0 || j>=grid[0].size() || grid[i][j] == -1){
        return;
    }

    if(grid[i][j] == 2){
        if(empty == count){
            res++;
        }
        return;
    }

    grid[i][j] = -1;
    //rec call
    dfs(grid,i+1,j,count+1);    //bottom
    dfs(grid,i-1,j,count+1);    //up
    dfs(grid,i,j+1,count+1);    //right
    dfs(grid,i,j-1,count+1);    //left

    grid[i][j] = 0;
}

int uniquePathsIII(vector<vector<int>>& grid) {
    int x,y;
    for(int i = 0;i<grid.size();i++){
        for(int j = 0;j<grid[0].size();j++){
            if(grid[i][j] == 1){
                x = i;
                y = j;
            }else if (grid[i][j] == 0){
                empty++;
            }
        }
    }
    dfs(grid,x,y,0);
    return res;
}