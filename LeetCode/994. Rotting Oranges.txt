
	//994. Rotting Oranges

//Problem Link:	https://leetcode.com/problems/rotting-oranges

vector<vector<int>> directions = {{1,0},{-1,0},{0,1},{0,-1}};

class Solution {
public:
int orangesRotting(vector<vector<int>>& grid) {
	queue<pair<int, int>> q;
	int n = grid.size(), m = grid[0].size();
	vector<vector<int>> visited(n, vector<int>(m, 0)), dist(n, vector<int>(m, INT_MAX));
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < m; j++) {
			if (grid[i][j] == 2) {
				q.push({i, j});
				dist[i][j] = 0;
				visited[i][j] = 1;
			}
		}
	}

	while (!q.empty()) {
		int x = q.front().first;
		int y = q.front().second;
		q.pop();

		for (auto dir : directions) {
			int dx = x + dir[0];
			int dy = y + dir[1];
			if (dx >= 0 and dx < grid.size() and dy >= 0 and dy < grid[0].size()) {
				if (grid[dx][dy] == 1 and !visited[dx][dy]) {
					q.push({dx, dy});
					visited[dx][dy] = 1;
				}
				dist[dx][dy] = min(dist[dx][dy], 1 + dist[x][y]);
			}
		}

	}

	int res = 0;
	for (int i  = 0; i < grid.size(); i++) {
		for (int j  = 0; j < grid[0].size(); j++) {
			if (grid[i][j] == 1) {
				res = max(res, dist[i][j]);
			}
		}
	}
	return res == INT_MAX ? -1 : res;
}

};