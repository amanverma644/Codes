
	//827. Making A Large Island

//Problem Link:	https://leetcode.com/problems/making-a-large-island

vector<vector<int>> directions = {{ -1, 0}, {1, 0}, {0, 1}, {0, -1}};

class Solution {
public:
	void flood_fill(vector<vector<int>> &grid, int row, int col, int color, int clr_cnt[]) {
		grid[row][col] = color;
		clr_cnt[color]++;

		for (auto dir : directions) {
			int dx = row + dir[0];
			int dy = col + dir[1];
			if (dx >= 0 and dx < grid.size() and dy >= 0 and dy < grid[0].size() and grid[dx][dy] == 1) {
				flood_fill(grid, dx, dy, color, clr_cnt);
			}
		}
	}

	int largestIsland(vector<vector<int>>& grid) {
		int total_cnt = 1;
		int clr_cnt[100001] {};

		for (int i = 0; i < grid.size(); i++) {
			for (int j = 0; j < grid[0].size(); j++) {
				if (grid[i][j] == 1) flood_fill(grid, i, j, ++total_cnt, clr_cnt);
			}
		}

		int res = 0;
		for (int i = 2; i <= total_cnt; i++) {
			res = max(res, clr_cnt[i]);
		}
		for (int i = 0; i < grid.size(); i++) {
			for (int j = 0; j < grid[0].size(); j++) {
				if (grid[i][j] == 0) {
					set<int> s;
					for (auto dir : directions) {
						int dx = i + dir[0];
						int dy = j + dir[1];
						if (dx >= 0 and dx < grid.size() and dy >= 0 and dy < grid[0].size()) {
							s.insert(grid[dx][dy]);
						}
					}

					int ans = 1;
					for (auto ele : s) {
						ans += clr_cnt[ele];
					}
					res = max(res, ans);
				}
			}
		}
		return res;
	}
};