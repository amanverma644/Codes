
	//802. Find Eventual Safe States

//Problem Link:	https://leetcode.com/problems/find-eventual-safe-states

bool dfs(vector<vector<int>>& graph,int node,vector<int> &vis){
	//0 -> Not visited
	//1 -> Not safe
	//2 -> safe
    vis[node] = 1;
    for(auto nbr:graph[node]){
        if(!vis[nbr]){
            bool subProb = dfs(graph,nbr,vis);
            if(!subProb) return false;
        }else if(vis[nbr] == 1){
            return false;
        }
    }
    vis[node] = 2;
    return true;
}

vector<int> eventualSafeNodes(vector<vector<int>>& graph) {
    int V = graph.size();
    vector<int> vis(V,0);

    for(int i = 0;i<V;i++){
        if(vis[i] == 0) dfs(graph,i,vis);
    }

    vector<int> res;
    for(int i = 0;i < V;i++){
        if(vis[i] == 2) res.push_back(i);
    }
    return res;
}