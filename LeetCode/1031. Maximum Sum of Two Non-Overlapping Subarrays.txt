
	//LeetCode 1031. Maximum Sum of Two Non-Overlapping Subarrays

#include <bits/stdc++.h>
using namespace std;

int maxSumTwoNoOverlap(vector<int>& nums, int firstLen, int secondLen) {
    int n=nums.size();
    //Case1. max subarray of length firstlen is found at left and 
    //max subarray of length secondlen is found on right

    //dp 1 is storing the max sum of subarray of length {firstLen}
    // left to right traversal
    vector<int> dp1(n);
    vector<int> dp2(n);
    int sum=0;

    for(int i=0;i<n;i++){
        if(i<firstLen){
            sum+=nums[i];
            dp1[i]=sum;
        }else{
            sum+=nums[i]-nums[i-firstLen];
            dp1[i]=max(dp1[i-1],sum);
        }
    }

    //dp2 is storing the max sum of subarray of length {secondlen}
    //right to left traveral
    sum=0;
    for(int i=n-1;i>=0;i--){
        if(i>=n-secondLen){
            sum+=nums[i];
            dp2[i]=sum;
        }else{
            sum+=nums[i]-nums[i+secondLen];
            dp2[i]=max(dp2[i+1],sum);
        }
    }

    int ans=0;
    for(int i=firstLen-1;i<n-secondLen;i++){
        ans=max(ans,dp1[i]+dp2[i+1]);
    }

    //Case2. max subarray of length firstlen is found at right and 
    //max subarray of length secondlen is found on left

    //dp 1 is storing the max sum of subarray of length {secondlen}
    // left to right traversal
    dp1.clear();
    dp1.resize(n,0);
    dp2.clear();
    dp2.resize(n,0);
    sum=0;

    for(int i=0;i<n;i++){
        if(i<secondLen){
            sum+=nums[i];
            dp1[i]=sum;
        }else{
            sum+=nums[i]-nums[i-secondLen];
            dp1[i]=max(dp1[i-1],sum);
        }
    }

    //dp2 is storing the max sum of subarray of length {firstlen}
    //right to left traveral
    sum=0;
    for(int i=n-1;i>=0;i--){
        if(i>=n-firstLen){
            sum+=nums[i];
            dp2[i]=sum;
        }else{
            sum+=nums[i]-nums[i+firstLen];
            dp2[i]=max(dp2[i+1],sum);
        }
    }

    for(int i=secondLen-1;i<n-firstLen;i++){
        ans=max(ans,dp1[i]+dp2[i+1]);
    }

    return ans;

}

int main() {
    vector<int> nums={0,6,5,2,2,5,1,9,4};
    int firstLen=1;
    int secondLen=2;
    cout<<maxSumTwoNoOverlap(nums,firstLen,secondLen)<<endl;
    return 0;
}
