
	//421. Maximum XOR of Two Numbers in an Array

//Problem Link:	https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array

//Easy to understand
class Node {
public:
	Node *left;
	Node *right;
};

class Trie {
public:
	Node *root;

	Trie() {
		root = new Node();
	}

	void insert(int val) {
		Node *temp = root;
		int bitIndex = 31;
		while (bitIndex >= 0) {
			int bit = val & (1 << bitIndex);
			if (bit) {
				if (temp->right == NULL) {
					temp->right = new Node();
				}
				temp = temp->right;
			} else {
				if (temp->left == NULL) {
					temp->left = new Node();
				}
				temp = temp->left;
			}
			bitIndex--;
		}
	}

	int query(int find) {
		Node *temp = root;
		int bitIndex = 31;
		int maxNo = 0;

		while (bitIndex >= 0) {
			int mask = 1 << bitIndex;
			int bit = find & (1 << bitIndex);
			if (bit) {
				if (temp->right != NULL) {
					maxNo = maxNo | mask;
					temp = temp->right;
				} else {
					temp = temp->left;
				}
			} else {
				if (temp->left != NULL) {
					temp = temp->left;
				} else {
					maxNo = maxNo | mask;
					temp = temp->right;
				}
			}
			bitIndex--;
		}

		return maxNo;
	}
};

int findMaximumXOR(vector<int>& nums) {
	Trie trie;
	for (auto &val : nums) {
		trie.insert(val);
	}

	int ans = 0;
	for (auto &val : nums) {
		int find = INT_MAX ^ val;
		int res = trie.query(find);
		ans = max(ans, res ^ val);
	}
	return ans;
}

//Another Optimised Approach
struct Node {
    Node *links[2]; 
 
    bool containsKey(int ind) {
        return (links[ind] != NULL); 
    }
    Node* get(int ind) {
        return links[ind]; 
    }
    void put(int ind, Node* node) {
        links[ind] = node; 
    }
}; 

class Trie {
    private: Node* root; 
public:
    Trie() {
        root = new Node(); 
    }
    
    public: 
    void insert(int num) {
        Node* node = root;
        // cout << num << endl; 
        for(int i = 31;i>=0;i--) {
            int bit = (num >> i) & 1; 
            if(!node->containsKey(bit)) {
                node->put(bit, new Node()); 
            }
            node = node->get(bit); 
        }
    }
    public:
    int findMax(int num) {
        Node* node = root; 
        int maxNum = 0; 
        for(int i = 31;i>=0;i--) {
            int bit = (num >> i) & 1; 
            if(node->containsKey(!bit)) {
                maxNum = maxNum | (1<<i); 
                node = node->get(!bit); 
            }
            else {
                node = node->get(bit); 
            }
        }
        return maxNum; 
    }
};

class Solution {
public:
    int findMaximumXOR(vector<int>& nums) {
        Trie trie;
        for(auto &it:nums){
            trie.insert(it);
         }

        int ans = 0;
        for(auto &it:nums){
            ans = max(ans,trie.findMax(it));
        }
        return ans;
    }
};