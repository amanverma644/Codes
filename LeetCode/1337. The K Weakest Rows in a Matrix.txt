
	//1337. The K Weakest Rows in a Matrix

//Problem Link:	https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix


//PQ(HEAP)
vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
    priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
    for(int i = 0;i<mat.size();i++){
        int count = 0;
        for(int j = 0;j<mat[0].size();j++){
            if(mat[i][j]) count++;
        }
        pq.push({count,i});
    }

    vector<int> res;
    while(!pq.empty() and k){
        auto p = pq.top();
        pq.pop();
        res.push_back(p.second);
        k--;
    }
    return res;
}

//Using Set
vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
    set<pair<int,int>> s;
    for(int i = 0;i<mat.size();i++){
        int p = accumulate(begin(mat[i]),end(mat[i]),0);
        s.insert({p,i});
    }
    
    vector<int> res;
    for(auto p:s){
        if(k == 0) break;
        res.push_back(p.second);
        k--;
    }
    return res;
}