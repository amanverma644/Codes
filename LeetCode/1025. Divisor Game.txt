
	//1025. Divisor Game

//Problem Link:	https://leetcode.com/problems/divisor-game


//<--------------BRUTE FORCE APPROACH------------>
int helper(int N){
    if(N == 1) return 0;
    for(int i = 1;i*i <= N;i++){
        if(n%i == 0){
            if(helper(N-i) == 0) return 1;
            if(i!=1 and helper(N - N/i) == 0) return 1;
        }
    }
    return 0;
}

bool divisorGame(int n) {
    return helper(n);
}


//<---------------DP APPROACH------------->
int dp[1001];
int helper(int N){
    if(N == 1) return 0;
    if(dp[N] != -1){
        return dp[N];
    }
    for(int i = 1;i*i <= N;i++){
        if(N%i == 0){
            if(helper(N-i) == 0) return dp[N] = 1;
            if(i!=1 and helper(N - N/i) == 0) return dp[N] = 1;
        }
    }
    return dp[N] = 0;
}

bool divisorGame(int n) {
    memset(dp,-1,sizeof dp);
    return helper(n);
}


//<-------------TRICK------------->

bool divisorGame(int n) {
    return n%2 == 0;
}