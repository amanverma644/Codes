
	//LeetCode 647 Palindromic Substrings

//Problem Link:	https://leetcode.com/problems/palindromic-substrings

//Approach -1 { Time-O(N^2) Space-O(N^2) } 
//Ref:	https://youtu.be/XmSOWnL6T_I

int countSubstrings(string s) {
    vector<vector<bool>> dp(s.length(),vector<bool>(s.length()));
    int count = 0;
    for(int g = 0;g<s.length();g++){
        for(int i = 0,j = g; j < s.length();i++,j++){
            if(g == 0){
                dp[i][j] = true;
            }else if(g == 1){
                if(s[i] == s[j]){
                    dp[i][j] = true;
                }else{
                    dp[i][j] = false;
                }
            }else{
                if(s[i] == s[j] and dp[i+1][j-1] == true){
                    dp[i][j] = true;
                }else{
                    dp[i][j] = false;
                }
            }

            if(dp[i][j] == true){
                count++;
            }
        }
    }
    return count;
}

//Approach -2	{ Time-O(N^3) Space-O(N^2) }
int isPlaindrome(string &s,int i,int j,vector<vector<int>> &dp){
    //base case
    if(i>=j){
        return 1;
    }
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    if(s[i]==s[j]){
        dp[i][j] = isPlaindrome(s,i+1,j-1,dp);
    }else{
        dp[i][j] = 0;
    }
    return dp[i][j];
}

int countSubstrings(string s) {
    int n=s.length();
    vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
    int count=0;
    for(int i=0;i<n;i++){
        for(int j=i;j<n;j++){
            count+=isPlaindrome(s,i,j,dp);
        }
    }
    return count;
}

