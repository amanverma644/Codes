
	//141. Linked List Cycle

//Problem Link:	https://leetcode.com/problems/linked-list-cycle

//Floyd's Cycle Detection Algo
bool hasCycle(ListNode *head) {
    if(!head) return head;
    ListNode* slow = head;
    ListNode* fast = head;
    while(fast and fast->next){
        fast = fast->next->next;
        slow = slow->next;
        if(slow == fast) return true;
    }
    return false;
}

//using unordered Map
bool hasCycle(ListNode *head) {
    unordered_set<ListNode*> s;
    while(head != NULL){
        if(s.count(head)) return true;
        s.insert(head);
        head = head->next;
    }
    return false;
}