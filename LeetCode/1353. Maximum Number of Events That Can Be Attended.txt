
	//1353. Maximum Number of Events That Can Be Attended

//Problem Link:	https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended

int maxEvents(vector<vector<int>>& events) {
	sort(begin(events), end(events));
	priority_queue<int, vector<int>, greater<int>> pq;

	int n = events.size();
	int ans = 0;
	int i = 0;
	for (int d = 1; d <= 100000; d++) {
		//remove events that are already over
		while (!pq.empty() and pq.top() < d) {
			pq.pop();
		}

		//insert deadlines of all events that start today
		while (i < n and events[i][0] == d) {
			pq.push(events[i][1]);
			i++;
		}

		//if there are any events that we can attend today
		//we attend that event with smallest endtime
		if (!pq.empty()) {
			pq.pop();
			ans++;
		}

		//if we processed all the elements
		if (pq.empty() and i == n) break;
	}
	return ans;
}