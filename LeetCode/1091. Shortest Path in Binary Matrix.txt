
	//1091. Shortest Path in Binary Matrix

//Problem Link:	https://leetcode.com/problems/shortest-path-in-binary-matrix

vector<vector<int>> directions = {{1,0},{-1,0},{0,1},{0,-1},{1,1},{-1,1},{-1,-1},{1,-1}};


int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
	if (grid[0][0] or grid[grid.size() - 1][grid[0].size() - 1]) return -1;
	queue<pair<int, int>> q;
	q.push({0, 0});
	grid[0][0] = 1;

	int ans = 0;
	while (!q.empty()) {
		ans++;
		int levelSize = q.size();
		while (levelSize--) {
			auto c = q.front();
			q.pop();
            
			int x = c.first, y = c.second;
			if (x == grid.size() - 1 and y == grid[0].size() - 1) return ans;
            
			for (auto dir : directions) {
				int dx = x + dir[0];
				int dy = y + dir[1];
				if (dx >= 0 and dx < grid.size() and dy >= 0 and dy < grid[0].size() and grid[dx][dy] == 0) {
					grid[dx][dy] = 1;
					q.push({dx, dy});
				}
			}
		}
	}
	return -1;
}