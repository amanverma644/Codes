
	//33. Search in Rotated Sorted Array

//Problem Link:	https://leetcode.com/problems/search-in-rotated-sorted-array

int search(vector<int>& nums, int target) {
    int low = 0, high = nums.size() - 1;
    while (low <= high) {
        int mid = (low + high) / 2;
        if (nums[mid] == target) return mid;
        //check left side is sorted or not
        if(nums[low] <= nums[mid]){
            //figure out target is on left side or not
            if(nums[low] <= target and target <= nums[mid]) high = mid - 1;
            else low = mid + 1;
        }else{
            if(nums[mid] <= target and target <= nums[high]) low = mid + 1;
            else high = mid - 1;
        }

    }
    return -1;
}