
	//935. Knight Dialer

//Problem Link:	https://leetcode.com/problems/knight-dialer

// Approach
/*
lets say last number we have ended on is 1.
Now, from 1 one from where i can come from ?
it will be either 6 or 8

Lets define the DP State:
dp[N][x] ->N is the number of steps to reach position x
___0<=x<=9___

Then what are the transitions that we can do ?
dp[N][x] = dp[N-1][y] + dp[N-1][z] ....
Here, y and z depends upon x

Then our final answer would be:
ans = dp[N][0] + dp[N][1] + dp[N][2] .....dp[N][9]
(Summation of the final row of our DP table)

*/

int knightDialer(int n) {
	vector<vector<int>> paths = {{4, 6}, {6, 8}, {7, 9}, {4, 8}, {3, 9, 0}, {}, {1, 7, 0}, {2, 6}, {1, 3}, {2, 4}};
	vector<vector<int>> dp(n + 1, vector<int>(10, 0));
	int mod = 1e9 + 7;

	for (int i = 1; i <= n; i++) {
		for (int j = 0; j < 10; j++) {
			if (i == 1) {
				dp[i][j] = 1;
			} else {
				for (auto path : paths[j]) {
					dp[i][j] += dp[i - 1][path];
					dp[i][j] %= mod;
				}
			}
		}
	}

	int ans = 0;
	for (int i = 0; i < 10; i++) {
		ans += dp[n][i];
		ans %= mod;
	}
	return ans;
}