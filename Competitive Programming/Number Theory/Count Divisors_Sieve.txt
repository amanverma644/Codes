
	//Counting Divisors using Sieve

#include <bits/stdc++.h>
using namespace std;

vector<int> sieve(int n){
    int p[n+1]={0};
    vector<int> primes;

    p[0] = p[1] = 1;
    for(int i = 2;i<=n;i++){
        if(p[i] == 0){
            primes.push_back(i);
            for(int j = i*i;j<=n;j+=i){
                p[j] = 1;
            }
        }
    }
    return primes;
}

int no_of_divisors(int m,vector<int> &primes){
    int ans = 1;
    int i = 0;
    int p = primes[0];

    while(p*p<=m){
        if(m%p == 0){
            int cnt = 0;
            while(m%p == 0){
                m = m/p;
                cnt++;
            }
            ans = ans*(cnt+1);
        }
        i++;
        p = primes[i];
    }
    if(m != 1){
        ans = ans*2;
    }
    return ans;
}

int main() {
    int n = 1000;
    vector<int> primes = sieve(n);

    int t;
    cin>>t;
    while(t--){
        int m;
        cin>>m;
        cout<<no_of_divisors(m,primes)<<endl;
    }

    return 0;
}