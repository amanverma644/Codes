
	//Prime Factorization Using Sieve

#include <bits/stdc++.h>
using namespace std;

//Time Complexity for each query: O(logN)
//Precomputation takes: O(NloglogN)
vector<int> sieve(int n){
    int p[n+1]={0};
    vector<int> primes;

    p[0] = p[1] = 1;
    for(int i = 2;i<=n;i++){
        if(p[i] == 0){
            primes.push_back(i);
            for(int j = i*i;j<=n;j+=i){
                p[j] = 1;
            }
        }
    }
    return primes;
}

vector<int> factorize(int m,vector<int> &primes){
    vector<int> factors;
    int i = 0;
    int p = primes[0];
    while(p*p<=m){
        if(m%p == 0){
            factors.push_back(p);
            while(m%p == 0){
                m = m/p;
            }
        }
        i++;
        p = primes[i];
    }
    if(m != 1){
        factors.push_back(m);
    }
    return factors;
}

int main() {
    int n = 1000;
    vector<int> primes = sieve(n);

    int t;
    cin>>t;
    while(t--){
        int m;
        cin>>m;
        vector<int> factors = factorize(m,primes);
        for(auto x:factors){
            cout<<x<<" ";
        }
        cout<<endl;
    }

    return 0;
}
