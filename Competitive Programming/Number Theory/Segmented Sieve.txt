
	//PRIME1 - Prime Generator (Segmented Sieve)

/*
Peter wants to generate some prime numbers for his cryptosystem. Help him! Your task is to generate all prime numbers between two given numbers!

Input
The input begins with the number t of test cases in a single line (t<=10). In each of the next t lines there are two numbers m and n (1 <= m <= n <= 1000000000, n-m<=100000) separated by a space.

Output
For every test case print all prime numbers p such that m <= p <= n, one number per line, test cases separated by an empty line.

Input:
2
1 10
3 5

Output:
2
3
5
7

3
5

PROBLEM LINK:	https://www.spoj.com/problems/PRIME1/cstart=10
*/

#include<bits/stdc++.h>
using namespace std;

const int N = 100000;
vector<int> primes;
int p[N] = {0};

void sieve() {
	for (int i = 2; i <= N; i++) {
		if (p[i] == 0) {
			//store i in the prime vector
			primes.push_back(i);
			//mark all multiples of i as not prime
			for (int j = i; j <= N; j += i) {
				p[j] = 1;
			}
		}
	}
}

int main() {
	sieve();

	int t;
	cin >> t;
	while (t--) {
		int n, m;
		cin >> m >> n;

		bool segment[n - m + 1];
		for (int i = 0; i < n - m + 1; i++) {
			segment[i] = 0;
		}

		//segmented sieve logic
		for (auto x : primes) {

			//stop the loop if rem prime nos are not needed
			if (x * x > n) {
				break;
			}

			int start = (m / x) * x;
			//prime no lie in the segment sieve range
			if (x >= m and x <= n) {
				start = x * 2;
			}

			if (start < m) {
				start += x;
			}
			//mark all the muliples of x, in the range start to n as not primes
			for (int i = start; i <= n; i += x) {
				segment[i - m] = 1;
			}

		}

		for (int i = m; i <= n; i++) {
			if (segment[i - m] == 0 and i != 1) {
				cout << i << endl;
			}
		}
	}

	return 0;
}